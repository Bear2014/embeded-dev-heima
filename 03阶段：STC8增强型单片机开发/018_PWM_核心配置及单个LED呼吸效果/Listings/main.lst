C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2025 23:02:48 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "STC8h.h"
   2          #include "lib/Config.h"
   3          #include "lib/STC8G_H_GPIO.h"
   4          #include "lib/STC8G_H_Delay.h"
   5          #include "lib/STC8G_H_NVIC.h"
   6          #include "lib/STC8G_H_Switch.h"
   7          #include "lib/STC8H_PWM.h"
   8          #include "lib/STC8G_H_UART.h"
   9          
  10          void GPIO_Config();
  11          
  12          #define LED_SW P45
  13          #define LED1 P27
  14          
  15          #define PERIOD ((MAIN_Fosc / 1000) - 1)
  16          PWMx_Duty  duty;
  17          
  18          /**
  19           * 效果完全ok
  20           */
  21           
  22          //PWM配置
  23          void PWM_Config() {
  24   1          PWMx_InitDefine pwm_init;
  25   1        
  26   1          //给成员赋值
  27   1          pwm_init.PWM_Mode = CCMRn_PWM_MODE2; //模式,    CCMRn_FREEZE,CCMRn_MATCH_VALID,CCMRn_MATCH_INVALID,CCMRn_
             -ROLLOVER,CCMRn_FORCE_INVALID,CCMRn_FORCE_VALID,CCMRn_PWM_MODE1,CCMRn_PWM_MODE2
  28   1                                               //模式设置的是高低电频，CCMRn_PWM_MODE1： ， CCMRn_PWM_MODE2：
  29   1          pwm_init.PWM_Duty = 0;
  30   1          //pwm_init.PWM_Duty = duty.PWM4_Duty;
  31   1          //pwm_init.PWM_EnoSelect = ENO4P | ENO4N; //输出通道选择, ENO1P,ENO1N,ENO2P,ENO2N,ENO3P,ENO3N,ENO4P,ENO
             -4N / ENO5P,ENO6P,ENO7P,ENO8P
  32   1          pwm_init.PWM_EnoSelect = ENO4N; //输出通道选择[对应LED1的输出引脚]
  33   1          PWM_Configuration(PWM4,&pwm_init);
  34   1        
  35   1          /**
  36   1           * 关键配置!!!!!
  37   1           * 周期时间[一个高电平和一个低电平加在一起占用的时间]，
  38   1           * 可配置范围：0~65535，CPU没有时间的概念，它的 时间概念 等同于 数数 的概念
  39   1           * 假设我们希望在以后计算比较容易，我们打算把周期设置为：1ms[时间]
  40   1           * 这个1ms代表 里面 有高电平 和 低电平的出现
  41   1           **/
  42   1          pwm_init.PWM_Period = PERIOD;
  43   1        
  44   1          /**
  45   1           * 关键配置！！！
  46   1           * 占空比时间[高电平的占比时间]
  47   1           * 可配置范围：0~period，也是 数数 的概念
  48   1           * 配置12000，就是占比0.5
  49   1           * 此配置就是不断变化，导致高电平比例平滑变化，从而导致LED由暗到亮的变化
  50   1           *  一般初始值给0，好逐步增加（有专门的函数来更新UpdatePwm()）
  51   1           */
  52   1          pwm_init.PWM_DeadTime = 0; //死区发生器，0~255
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2025 23:02:48 PAGE 2   

  53   1          pwm_init.PWM_CEN_Enable = ENABLE; //使能计数器，ENABLE，DISABLE
  54   1          pwm_init.PWM_MainOutEnable = ENABLE; //主输出使用，ENABLE,DISABLE
  55   1          
  56   1          PWM_Configuration(PWMA,&pwm_init);
  57   1          
  58   1          //切换引脚
  59   1          PWM4_SW(PWM4_SW_P26_P27);
  60   1          
  61   1          //中断使能
  62   1          NVIC_PWM_Init(PWMA,DISABLE,Priority_0);
  63   1      }
  64          
  65          
  66          void main() {
  67   1        int percent = 0;
  68   1        int direction = 1;
  69   1      
  70   1        
  71   1        //配置GPIO
  72   1        GPIO_Config();
  73   1      
  74   1        //打开拓展寄存器使用(pwm专用),且一定要在配置pwm之前打开！！！！！
  75   1        EAXSFR();
  76   1        
  77   1        //配置pwm
  78   1        PWM_Config();
  79   1        
  80   1        //打开全局中断
  81   1        EA = 1;
  82   1        
  83   1        LED_SW = 0;
  84   1        
  85   1        //LED1 = 0;
  86   1        
  87   1        while(1) { //此处也可以改成使用定时器来定时获取数据
  88   2      
  89   2          percent += direction;
  90   2          if(percent == 100) {
  91   3            direction = -1;
  92   3          } else if(percent == 0){
  93   3            direction = 1;
  94   3          }
  95   2          
  96   2          //更新占空比：参数1：更新哪一个通道或者哪一个组；参数2：占空比的指针变量
  97   2          duty.PWM4_Duty = PERIOD * percent / 100; //范围0~PERIOD,此值是一直变化的: PERIOD * 百分比
  98   2          UpdatePwm(PWM4, &duty);
  99   2          
 100   2          delay_ms(50); //避免变化太快
 101   2        }
 102   1      
 103   1      }
 104          
 105          void GPIO_Config() {
 106   1        GPIO_InitTypeDef GPIO_InitTypeDef;
 107   1      
 108   1        GPIO_InitTypeDef.Mode = GPIO_OUT_PP;
 109   1        GPIO_InitTypeDef.Pin = GPIO_Pin_5;
 110   1        GPIO_Inilize(GPIO_P4,&GPIO_InitTypeDef);
 111   1        
 112   1        GPIO_InitTypeDef.Mode = GPIO_OUT_PP;
 113   1        GPIO_InitTypeDef.Pin = GPIO_Pin_7;
 114   1        GPIO_Inilize(GPIO_P2,&GPIO_InitTypeDef);
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2025 23:02:48 PAGE 3   

 115   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    210    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
