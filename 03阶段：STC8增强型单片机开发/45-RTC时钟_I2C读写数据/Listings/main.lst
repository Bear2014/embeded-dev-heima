C51 COMPILER V9.60.7.0   MAIN                                                              08/01/2025 00:27:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "lib/Config.h"
   2          #include "lib/STC8G_H_GPIO.h"
   3          #include "lib/STC8G_H_Delay.h"
   4          
   5          #include "lib/STC8G_H_I2C.h"
   6          #include "lib/STC8G_H_UART.h"
   7          #include "lib/STC8G_H_NVIC.h"
   8          #include "lib/STC8G_H_Switch.h"
   9          
  10          
  11          /**
  12           * 思路：
  13           * 1.初始化IO口，将P32,P33初始化为开漏OD模式
  14           * 2.初始化I2C协议、UART
  15           * 3.通过I2C读取RTC时钟芯片的数据
  16           * 4.通过I2C向RTC时钟芯片写数据 
  17           **/
  18          
  19          
  20          void GPIO_Config();
  21          void UART_Config();
  22          void I2C_Config();
  23          
  24          
  25          void main() {
  26   1        
  27   1        EAXSFR();
  28   1        
  29   1        GPIO_Config();
  30   1        UART_Config();
  31   1        I2C_Config();
  32   1        
  33   1        EA = 1;
  34   1        
  35   1        printf("---read---\n"); // 需要注意，这里是串口打印，需要修改使用到的串口组，在库函数STC8G_H_UART.h第29行
  36   1        
  37   1        //3.通过I2C读取RTC时钟芯片的数据
  38   1        
  39   1        
  40   1        //4.通过I2C向RTC时钟芯片写数据 
  41   1        
  42   1        while(1) {}
  43   1      
  44   1      }
  45          
  46          void GPIO_Config() {
  47   1        GPIO_InitTypeDef GPIO_InitTypeDef;
  48   1      
  49   1        GPIO_InitTypeDef.Mode = GPIO_OUT_OD; //开漏模式
  50   1        GPIO_InitTypeDef.Pin = GPIO_Pin_2 | GPIO_Pin_3;
  51   1        GPIO_Inilize(GPIO_P2,&GPIO_InitTypeDef);
  52   1      }
  53          
  54          
C51 COMPILER V9.60.7.0   MAIN                                                              08/01/2025 00:27:03 PAGE 2   

  55          void UART_config(void)
  56          {
  57   1          COMx_InitDefine   COMx_InitStructure;         //结构定义
  58   1      
  59   1          COMx_InitStructure.UART_Mode      = UART_8bit_BRTx; //模式, UART_ShiftRight,UART_8bit_BRTx,UART_9bit,U
             -ART_9bit_BRTx
  60   1          COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //选择波特率发生器, BRT_Timer1, BRT_Timer2 (注意: 串
             -口2固定使用BRT_Timer2)
  61   1          COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  62   1          COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  63   1          COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  64   1          UART_Configuration(UART1, &COMx_InitStructure);   //初始化串口1 UART1,UART2,UART3,UART4
  65   1        
  66   1        
  67   1          NVIC_UART1_Init(ENABLE,Priority_1);   //中断使能, ENABLE\DISABLE; 优先级(低到高) Priority_0,Priority_1,
             -Priority_2,Priority_3
  68   1          
  69   1          UART1_SW(UART1_SW_P30_P31);   //UART1_SW_P30_P31,UART1_SW_P36_P37,UART1_SW_P16_P17,UART1_SW_P43_P44
  70   1      }
  71          
  72          
  73          void I2C_Config()
  74          {
  75   1          I2C_InitTypeDef I2C_init;
  76   1          I2C_init.I2C_Mode = I2C_Mode_Master;  //主从设备选择 I2C_Mode_Master, I2C_Mode_Slave
  77   1          I2C_init.I2C_Enable = ENABLE;         //I2C功能使用，ENABLE,DISABLE
  78   1          I2C_init.I2C_MS_WDTA = DISABLE;       //主机使用自动发送，ENABLE,DISABLE(间隔一段时间自动发送)
  79   1          I2C_init.I2C_Speed = 13;              //总线速度=Fosc/2/(Speed*2+4)   范围：0~63
  80   1                                                //固定计算方式： 400K = 24M / 2 / (Speed*2 + 4) 
  81   1          I2C_Init(&I2C_init);
  82   1        
  83   1        
  84   1          NVIC_I2C_Init(I2C_Mode_Master,DISABLE,Priority_0); //主从模式，I2C_Mode_Master, I2C_Mode_Slave;中断使用
             -：ENABLE,DISABLE；优先级（低到高）Priority_0,Priority_1,Priority_3
  85   1          I2C_SW(I2C_P33_P32);
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    124    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
